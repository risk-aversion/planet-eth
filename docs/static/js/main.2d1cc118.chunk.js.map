{"version":3,"sources":["MapComponent.js","App.js","reportWebVitals.js","index.js"],"names":["MapComponent","data","countriesGeoJson","layers","GeoJsonLayer","id","pickable","filled","getFillColor","d","hex","properties","color","parseInt","slice","initialViewState","longitude","latitude","zoom","controller","getTooltip","object","ADMIN","engine","Styletron","App","value","theme","LightTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wyr4oBAee,SAASA,IACtB,IAAMC,EAAOC,EAoBPC,EAAS,CAbM,IAAIC,IAAa,CACpCC,GAAI,gBACJJ,OACAK,UAAU,EAEVC,QAAQ,EAERC,aAAc,SAACC,GAAD,OAvBAC,EAuBgBD,EAAEE,WAAWC,MAlBtC,CAJGC,SAASH,EAAII,MAAM,EAAG,GAAI,IAC1BD,SAASH,EAAII,MAAM,EAAG,GAAI,IAC1BD,SAASH,EAAII,MAAM,EAAG,GAAI,IAEnB,KALnB,IAAkBJ,MA+BhB,OACE,cAAC,IAAD,CACEK,iBAvBc,CAChBC,UAAW,EACXC,SAAU,EACVC,KAAM,GAqBJC,YAAY,EACZhB,OAAQA,EACRiB,WAAY,gBAAGC,EAAH,EAAGA,OAAH,OAAgBA,GAAUA,EAAOV,WAAWW,SCtC9D,IAAMC,EAAS,IAAIC,IAYJC,EAVH,WACV,OACE,cAAC,IAAD,CAAmBC,MAAOH,EAA1B,SACE,cAAC,IAAD,CAAcI,MAAOC,IAArB,SACE,cAAC5B,EAAD,SCCO6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2d1cc118.chunk.js","sourcesContent":["/// app.js\nimport React from \"react\";\n\nimport DeckGL from \"@deck.gl/react\";\nimport { GeoJsonLayer } from \"@deck.gl/layers\";\nimport countriesGeoJson from \"./countries.json\";\n\nfunction hexToRGB(hex) {\n  const r = parseInt(hex.slice(1, 3), 16);\n  const g = parseInt(hex.slice(3, 5), 16);\n  const b = parseInt(hex.slice(5, 7), 16);\n\n  return [r, g, b, 255];\n}\n\nexport default function MapComponent() {\n  const data = countriesGeoJson;\n  const viewState = {\n    longitude: 0,\n    latitude: 0,\n    zoom: 0,\n  };\n\n  const geoJsonLayer = new GeoJsonLayer({\n    id: \"geojson-layer\",\n    data,\n    pickable: true,\n    // stroked: true,\n    filled: true,\n    // lineWidthUnits: 'pixels',\n    getFillColor: (d) => hexToRGB(d.properties.color),\n    // getLineColor: [0, 0, 0, 255],//d => colorToRGBArray(d.properties.color),\n    // getLineColor: [0, 0, 0, 255],\n    // getLineWidth: 0.1,\n  });\n\n  const layers = [geoJsonLayer];\n\n  return (\n    <DeckGL\n      initialViewState={viewState}\n      controller={true}\n      layers={layers}\n      getTooltip={({ object }) => object && object.properties.ADMIN}\n      // views={new MapView({ repeat: true })}\n    />\n  );\n}\n","import { Client as Styletron } from \"styletron-engine-monolithic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { LightTheme, BaseProvider } from \"baseui\";\nimport MapComponent from \"./MapComponent.js\";\n\nconst engine = new Styletron();\n\nconst App = () => {\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={LightTheme}>\n        <MapComponent />\n      </BaseProvider>\n    </StyletronProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}