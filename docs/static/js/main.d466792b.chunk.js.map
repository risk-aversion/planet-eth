{"version":3,"sources":["utils/constants.js","hooks/api.js","MapComponent.js","App.js","reportWebVitals.js","index.js"],"names":["BLACK","BLUE","URL","process","production","Leaderboard","styled","$theme","fontFamily","color","width","height","float","Row","display","justifyContent","viewState","longitude","latitude","zoom","MapComponent","useState","metadata","setMetadata","ownerList","setOwnerList","useEffect","a","fetch","json","meta","list","items","reduce","acc","val","owner","owners","country","attributes","find","trait","key","value","RaribleHook","data","countriesGeoJson","geoJsonLayer","GeoJsonLayer","id","pickable","stroked","lineWidthUnits","filled","getLineWidth","getFillColor","getLineColor","initialViewState","window","screen","controller","layers","getTooltip","object","properties","ADMIN","views","MapView","repeat","Object","entries","map","length","engine","Styletron","App","theme","DarkTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"g1r4oBAKaA,EAAQ,CAAC,EAAG,EAAG,EAAG,KAClBC,EAAO,CAAC,GAAI,IAAK,IAAK,K,gCCH7BC,EAAMC,oIAAYC,WDAE,GAFxB,uJ,QEWIC,EAAcC,YAAO,OAAO,YAAgB,EAAbC,OACnC,MAAO,CACLC,WAAY,eACZC,MAAO,QACPC,MAAO,OACPC,OAAQ,QACRC,MAAO,YAILC,EAAMP,YAAO,OAAO,cAAGC,OAAH,MAAiB,CACzCO,QAAS,OACTC,eAAgB,oBAGZC,EAAY,CAChBC,UAAW,EACXC,SAAU,EACVC,KAAM,GAGO,SAASC,IAAgB,IAAD,ED5BZ,WAAO,IAAD,EACCC,qBADD,mBACxBC,EADwB,KACdC,EADc,OAEGF,qBAFH,mBAExBG,EAFwB,KAEbC,EAFa,KAyB/B,OArBAC,qBAAU,WACR,sBAAC,8BAAAC,EAAA,sEAC2BC,MAAM1B,GADjC,8BACuC2B,OADvC,QACOC,EADP,UAGGP,EAAYO,GACNC,EAAOD,EAAKE,MAAMC,QAAO,SAACC,EAAKC,GACnC,IAAMC,EAAQD,EAAIE,OAAO,GACnBC,EAAUH,EAAIL,KAAKS,WAAWC,MAClC,SAACC,GAAD,MAAyB,SAAdA,EAAMC,OAKnB,OAHAR,EAAIE,GACCF,EAAIE,GAAJ,sBAAiBF,EAAIE,IAArB,CAA6BE,EAAQK,QACrCT,EAAIE,GAAS,CAACE,EAAQK,OACpBT,IACN,IAEHT,EAAaM,IAfhB,0CAAD,KAkBC,IAEI,CACLT,WACAE,aCE8BoB,GAAxBpB,EAD6B,EAC7BA,UAEFqB,GAH+B,EAClBvB,SAENwB,GAEPC,EAAe,IAAIC,IAAa,CACpCC,GAAI,gBACJJ,OACAK,UAAU,EACVC,SAAS,EACTC,eAAgB,SAChBC,QAAQ,EAIRC,aAAc,EACdC,aAAcvD,EACdwD,aAAcvD,IAGhB,OACE,gCACE,cAAC,IAAD,CACEwD,iBAAkBzC,EAClBN,MAA6B,GAAtBgD,OAAOC,OAAOjD,MACrBC,OAAQ+C,OAAOC,OAAOhD,OACtBiD,YAAY,EACZC,OAAQ,CAACd,GACTe,WAAY,YAAiB,IAAdC,EAAa,EAAbA,OAIb,OAAOA,GAAUA,EAAOC,WAAWC,OAErCC,MAAO,IAAIC,IAAQ,CAAEC,QAAQ,MAE/B,eAAC/D,EAAD,yBAEGmB,GACC6C,OAAOC,QAAQ9C,GAAW+C,KAAI,mCAAE7B,EAAF,KAAOP,EAAP,YAC5B,eAACtB,EAAD,WACE,gCAAM6B,EAAN,OACA,8BAAMP,EAAIqC,WAFF9B,YCpEtB,IAAM+B,EAAS,IAAIC,IAYJC,EAVH,WACV,OACE,cAAC,IAAD,CAAmBhC,MAAO8B,EAA1B,SACE,cAAC,IAAD,CAAcG,MAAOC,IAArB,SACE,cAACzD,EAAD,SCCO0D,G,OAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d466792b.chunk.js","sourcesContent":["export const staging =\n  \"https://api-staging.rarible.com/protocol/v0.1/ethereum/nft/items/byCollection?collection=0x8e3ab56dff9ad1954c8cb7e8890ba049ca4adf13&includeMeta=true\";\n\nexport const production = ''\n\nexport const BLACK = [0, 0, 0, 255];\nexport const BLUE = [44, 151, 210, 255];","import { useEffect, useState } from \"react\";\nimport { staging, production } from \"../utils/constants\";\n\nconst URL = process.env.production ? production : staging;\n\nexport const RaribleHook = () => {\n  const [metadata, setMetadata] = useState();\n  const [ownerList, setOwnerList] = useState();\n\n  useEffect(() => {\n    (async () => {\n      const meta = await (await fetch(URL)).json();\n      if (meta) {\n        setMetadata(meta);\n        const list = meta.items.reduce((acc, val) => {\n          const owner = val.owners[0];\n          const country = val.meta.attributes.find(\n            (trait) => trait.key === \"name\"\n          );\n          acc[owner]\n            ? (acc[owner] = [...acc[owner], country.value])\n            : (acc[owner] = [country.value]);\n          return acc;\n        }, {});\n\n        setOwnerList(list);\n      }\n    })();\n  }, []);\n\n  return {\n    metadata,\n    ownerList,\n  };\n};\n","/// app.js\nimport React from \"react\";\nimport { styled } from \"baseui\";\nimport DeckGL from \"@deck.gl/react\";\nimport { MapView } from \"@deck.gl/core\";\nimport { GeoJsonLayer } from \"@deck.gl/layers\";\n\nimport countriesGeoJson from \"./countries.json\";\nimport { BLUE, BLACK } from \"./utils/constants\";\n\nimport { RaribleHook } from \"./hooks/api\";\n\nconst Leaderboard = styled(\"div\", ({ $theme }) => {\n  return {\n    fontFamily: \"Chakra Petch\",\n    color: \"white\",\n    width: \"40vw\",\n    height: \"100vh\",\n    float: \"right\",\n  };\n});\n\nconst Row = styled(\"div\", ({ $theme }) => ({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n}));\n\nconst viewState = {\n  longitude: 0,\n  latitude: 0,\n  zoom: 0,\n};\n\nexport default function MapComponent() {\n  const { ownerList, metadata } = RaribleHook();\n\n  const data = countriesGeoJson;\n\n  const geoJsonLayer = new GeoJsonLayer({\n    id: \"geojson-layer\",\n    data,\n    pickable: true,\n    stroked: true,\n    lineWidthUnits: \"pixels\",\n    filled: true,\n    // lineWidthUnits: 'pixels',\n    // getFillColor: (d) => hexToRGB(d.properties.color),\n    // getLineColor: [0, 0, 0, 255],//d => colorToRGBArray(d.properties.color),\n    getLineWidth: 1,\n    getFillColor: BLACK,\n    getLineColor: BLUE,\n  });\n\n  return (\n    <div>\n      <DeckGL\n        initialViewState={viewState}\n        width={window.screen.width * 0.6}\n        height={window.screen.height}\n        controller={true}\n        layers={[geoJsonLayer]}\n        getTooltip={({ object }) => {\n          // const meta = mapMetaData?.items?.find(country => {\n          //   return country?.meta?.name?.includes(object?.properties?.ADMIN)\n          // })\n          return object && object.properties.ADMIN;\n        }}\n        views={new MapView({ repeat: true })}\n      />\n      <Leaderboard>\n        Leaderboard\n        {ownerList &&\n          Object.entries(ownerList).map(([key, val]) => (\n            <Row key={key}>\n              <div>{key}:</div>\n              <div>{val.length}</div>\n            </Row>\n          ))}\n      </Leaderboard>\n    </div>\n  );\n}\n","import { Client as Styletron } from \"styletron-engine-monolithic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { DarkTheme, BaseProvider } from \"baseui\";\nimport MapComponent from \"./MapComponent.js\";\n\nconst engine = new Styletron();\n\nconst App = () => {\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={DarkTheme}>\n        <MapComponent/>\n      </BaseProvider>\n    </StyletronProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport './index.css'\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}