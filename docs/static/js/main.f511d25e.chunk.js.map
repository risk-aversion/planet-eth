{"version":3,"sources":["components/HeaderNavigation.js","utils/constants.js","components/MapComponent.js","hooks/api.js","components/Leaderboard.js","App.js","reportWebVitals.js","index.js"],"names":["$align","ALIGN","left","className","data-text","center","right","href","BLACK","BLUE","MapContainer","styled","$theme","height","width","position","viewState","longitude","latitude","zoom","data","countriesGeoJson","MapComponent","geoJsonLayer","GeoJsonLayer","id","pickable","stroked","lineWidthUnits","filled","getLineWidth","getFillColor","getLineColor","initialViewState","controller","layers","getTooltip","object","properties","ADMIN","views","MapView","repeat","URL","process","production","Leaderboard","fontFamily","color","float","overflow","padding","sizing","scale200","LeaderboardTitle","fontWeight","fontSize","fontStyle","Row","display","justifyContent","ownerList","useState","metadata","setMetadata","setOwnerList","useEffect","a","fetch","json","meta","list","items","reduce","acc","val","owner","owners","country","attributes","find","trait","key","value","RaribleHook","Object","entries","map","length","engine","Styletron","CentralContainer","App","theme","DarkTheme","HeaderNavigation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"y1r4oBAUe,aACb,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAsBA,OAAQC,IAAMC,KAApC,SACE,cAAC,IAAD,CAAsBC,UAAU,gBAAgBC,YAAU,aAA1D,0BAIF,cAAC,IAAD,CAAsBJ,OAAQC,IAAMI,SACpC,eAAC,IAAD,CAAsBL,OAAQC,IAAMK,MAApC,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAYC,KAAK,SAAjB,qBAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAYA,KAAK,YAAjB,2BAGJ,cAAC,IAAD,CAAsBP,OAAQC,IAAMK,MAApC,SACE,cAAC,IAAD,UACE,cAAC,IAAD,qC,oCCxBGE,EAAQ,CAAC,EAAG,EAAG,EAAG,KAClBC,EAAO,CAAC,GAAI,IAAK,IAAK,KCI7BC,EAAeC,YAAO,OAAO,cAAGC,OAAH,MAAiB,CAClDC,OAAQ,OACRC,MAAO,OACPC,SAAU,eAGNC,EAAY,CAChBC,UAAW,EACXC,SAAU,EACVC,KAAM,GAGFC,EAAOC,EAEE,SAASC,IACtB,IAAMC,EAAe,IAAIC,IAAa,CACpCC,GAAI,gBACJL,OACAM,UAAU,EACVC,SAAS,EACTC,eAAgB,SAChBC,QAAQ,EAIRC,aAAc,EACdC,aAAcvB,EACdwB,aAAcvB,IAGhB,OACE,cAACC,EAAD,UACE,cAAC,IAAD,CACEuB,iBAAkBjB,EAClBF,MAAO,OACPD,OAAQ,OACRqB,YAAY,EACZC,OAAQ,CAACZ,GACTa,WAAY,YAAiB,IAAdC,EAAa,EAAbA,OAIb,OAAOA,GAAUA,EAAOC,WAAWC,OAErCC,MAAO,IAAIC,IAAQ,CAAEC,QAAQ,Q,4CCnD/BC,EAAMC,oIAAYC,WFAE,GAFxB,uJGIIC,G,OAAcnC,YAAO,OAAO,YAChC,MAAO,CACLoC,WAAY,eACZC,MAAO,QACPlC,MAAO,OACPD,OAAQ,OACRoC,MAAO,QACPC,SAAU,OACVC,QAR8C,EAAbvC,OAQjBwC,OAAOC,cAIrBC,EAAmB3C,YAAO,MAAO,CACrC4C,WAAY,OACZC,SAAU,GACVC,UAAW,WAGPC,EAAM/C,YAAO,OAAO,cAAGC,OAAH,MAAiB,CACzC+C,QAAS,OACTC,eAAgB,oBAGH,aAAO,IACZC,EDxBiB,WAAO,IAAD,EACCC,qBADD,mBACxBC,EADwB,KACdC,EADc,OAEGF,qBAFH,mBAExBD,EAFwB,KAEbI,EAFa,KAyB/B,OArBAC,qBAAU,WACR,sBAAC,8BAAAC,EAAA,sEAC2BC,MAAMzB,GADjC,8BACuC0B,OADvC,QACOC,EADP,UAGGN,EAAYM,GACNC,EAAOD,EAAKE,MAAMC,QAAO,SAACC,EAAKC,GACnC,IAAMC,EAAQD,EAAIE,OAAO,GACnBC,EAAUH,EAAIL,KAAKS,WAAWC,MAClC,SAACC,GAAD,MAAyB,SAAdA,EAAMC,OAKnB,OAHAR,EAAIE,GACCF,EAAIE,GAAJ,sBAAiBF,EAAIE,IAArB,CAA6BE,EAAQK,QACrCT,EAAIE,GAAS,CAACE,EAAQK,OACpBT,IACN,IAEHT,EAAaM,IAfhB,0CAAD,KAkBC,IAEI,CACLR,WACAF,aCHoBuB,GAAdvB,UAER,OACE,eAACf,EAAD,WACE,cAACQ,EAAD,0BACCO,GACCwB,OAAOC,QAAQzB,GAAW0B,KAAI,mCAAEL,EAAF,KAAOP,EAAP,YAC5B,eAACjB,EAAD,WACE,gCAAMwB,EAAN,OACA,8BAAMP,EAAIa,WAFFN,UC7BdO,EAAS,IAAIC,IAEbC,EAAmBhF,YAAO,OAAO,cAAGC,OAAH,MAAiB,CACtD+C,QAAS,WAmBIiC,EAhBH,WACV,OACE,cAAC,IAAD,CAAmBT,MAAOM,EAA1B,SACE,cAAC,IAAD,CAAcI,MAAOC,IAArB,SACE,gCACE,cAACC,EAAD,IACA,eAACJ,EAAD,WACE,cAACrE,EAAD,IACA,cAAC,EAAD,eCTG0E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f511d25e.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {\n  HeaderNavigation,\n  ALIGN,\n  StyledNavigationList,\n  StyledNavigationItem,\n} from \"baseui/header-navigation\";\nimport { StyledLink } from \"baseui/link\";\nimport { Button } from \"baseui/button\";\n\nexport default () => {\n  return (\n    <HeaderNavigation>\n      <StyledNavigationList $align={ALIGN.left}>\n        <StyledNavigationItem className=\"glitch-effect\" data-text=\"Planet ETH\">\n          Planet ETH\n        </StyledNavigationItem>\n      </StyledNavigationList>\n      <StyledNavigationList $align={ALIGN.center} />\n      <StyledNavigationList $align={ALIGN.right}>\n        <StyledNavigationItem>\n          <StyledLink href=\"#about\">About</StyledLink>\n        </StyledNavigationItem>\n        <StyledNavigationItem>\n          <StyledLink href=\"#road-map\">Road Map</StyledLink>\n        </StyledNavigationItem>\n      </StyledNavigationList>\n      <StyledNavigationList $align={ALIGN.right}>\n        <StyledNavigationItem>\n          <Button>Connect Wallet</Button>\n        </StyledNavigationItem>\n      </StyledNavigationList>\n    </HeaderNavigation>\n  );\n};\n","export const staging =\n  \"https://api-staging.rarible.com/protocol/v0.1/ethereum/nft/items/byCollection?collection=0x8e3ab56dff9ad1954c8cb7e8890ba049ca4adf13&includeMeta=true\";\n\nexport const production = ''\n\nexport const BLACK = [0, 0, 0, 255];\nexport const BLUE = [44, 151, 210, 255];","/// app.js\nimport React from \"react\";\nimport { styled } from 'baseui';\nimport DeckGL from \"@deck.gl/react\";\nimport { MapView } from \"@deck.gl/core\";\nimport { GeoJsonLayer } from \"@deck.gl/layers\";\n\nimport countriesGeoJson from \"../countries.json\";\nimport { BLUE, BLACK } from \"../utils/constants\";\n\nconst MapContainer = styled(\"div\", ({ $theme }) => ({\n  height: \"80vh\",\n  width: \"60vw\",\n  position: \"relative\",\n}));\n\nconst viewState = {\n  longitude: 0,\n  latitude: 0,\n  zoom: 0,\n};\n\nconst data = countriesGeoJson;\n\nexport default function MapComponent() {\n  const geoJsonLayer = new GeoJsonLayer({\n    id: \"geojson-layer\",\n    data,\n    pickable: true,\n    stroked: true,\n    lineWidthUnits: \"pixels\",\n    filled: true,\n    // lineWidthUnits: 'pixels',\n    // getFillColor: (d) => hexToRGB(d.properties.color),\n    // getLineColor: [0, 0, 0, 255],//d => colorToRGBArray(d.properties.color),\n    getLineWidth: 1,\n    getFillColor: BLACK,\n    getLineColor: BLUE,\n  });\n\n  return (\n    <MapContainer>\n      <DeckGL\n        initialViewState={viewState}\n        width={\"100%\"}\n        height={\"100%\"}\n        controller={true}\n        layers={[geoJsonLayer]}\n        getTooltip={({ object }) => {\n          // const meta = mapMetaData?.items?.find(country => {\n          //   return country?.meta?.name?.includes(object?.properties?.ADMIN)\n          // })\n          return object && object.properties.ADMIN;\n        }}\n        views={new MapView({ repeat: true })}\n      />\n    </MapContainer>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { staging, production } from \"../utils/constants\";\n\nconst URL = process.env.production ? production : staging;\n\nexport const RaribleHook = () => {\n  const [metadata, setMetadata] = useState();\n  const [ownerList, setOwnerList] = useState();\n\n  useEffect(() => {\n    (async () => {\n      const meta = await (await fetch(URL)).json();\n      if (meta) {\n        setMetadata(meta);\n        const list = meta.items.reduce((acc, val) => {\n          const owner = val.owners[0];\n          const country = val.meta.attributes.find(\n            (trait) => trait.key === \"name\"\n          );\n          acc[owner]\n            ? (acc[owner] = [...acc[owner], country.value])\n            : (acc[owner] = [country.value]);\n          return acc;\n        }, {});\n\n        setOwnerList(list);\n      }\n    })();\n  }, []);\n\n  return {\n    metadata,\n    ownerList,\n  };\n};\n","import React from \"react\";\nimport { styled } from \"baseui\";\nimport { RaribleHook } from \"../hooks/api\";\nimport \"../index.css\"\n\nconst Leaderboard = styled(\"div\", ({ $theme }) => {\n  return {\n    fontFamily: \"Chakra Petch\",\n    color: \"white\",\n    width: \"40vw\",\n    height: \"100%\",\n    float: \"right\",\n    overflow: \"auto\",\n    padding: $theme.sizing.scale200,\n  };\n});\n\nconst LeaderboardTitle = styled(\"div\", {\n  fontWeight: \"bold\",\n  fontSize: 50,\n  fontStyle: \"italic\",\n});\n\nconst Row = styled(\"div\", ({ $theme }) => ({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n}));\n\nexport default () => {\n  const { ownerList } = RaribleHook();\n\n  return (\n    <Leaderboard>\n      <LeaderboardTitle>Leaderboard</LeaderboardTitle>\n      {ownerList &&\n        Object.entries(ownerList).map(([key, val]) => (\n          <Row key={key}>\n            <div>{key}:</div>\n            <div>{val.length}</div>\n          </Row>\n        ))}\n    </Leaderboard>\n  );\n};\n","import { Client as Styletron } from \"styletron-engine-monolithic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { DarkTheme, BaseProvider, styled } from \"baseui\";\nimport HeaderNavigation from \"./components/HeaderNavigation\";\nimport MapComponent from \"./components/MapComponent\";\nimport Leaderboard from \"./components/Leaderboard\";\n\nconst engine = new Styletron();\n\nconst CentralContainer = styled(\"div\", ({ $theme }) => ({\n  display: \"flex\",\n}));\n\nconst App = () => {\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={DarkTheme}>\n        <div>\n          <HeaderNavigation />\n          <CentralContainer>\n            <MapComponent />\n            <Leaderboard />\n          </CentralContainer>\n        </div>\n      </BaseProvider>\n    </StyletronProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport './index.css'\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}